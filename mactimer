#!/bin/bash

#disable job control
trap "" SIGTSTP

if [ $USER = root ]; then
  echo "$(date) Cannot run as root"
  $SAY Cannot run as root
  exit 1
fi

if [ -e $HOME/.mactimer ]; then
  . $HOME/.mactimer
else
  read -p "What is the name of this computer?" ans
  echo "export COMPUTER_NAME='$ans'" > $HOME/.mactimer
fi

TIME=${1:-60}
PERSON=${2:-$USER}
MESSAGE=${3:-Play something fun}

SESSION_DIR=$/var/tmp/Session-$(date +%Y%d%m-%H%M%S)
mkdir -p "$SESSION_DIR"

echo "$USER $PERSON $TIME $MESSAGE" > $SESSION_DIR/session_info.txt

VOICE=${VOICE:-Zarvox}

SAY="say --voice $VOICE"
DELAY_AFTER_WARNING=${DELAY_AFTER_WARNING:-15}

logged_in_user() {
  stat -f %Su /dev/console
}

lockit() {
  trap 'echo ignored' TERM QUIT INT
  $SAY bye
  MAX_TRIES=5
  TRY=0

  while true; do
    if [ $((TRY++)) -gt $MAX_TRIES ]; then 
	echo $(date) Giving up after $TRY tries
        $SAY Giving up
        return; 
    fi

    lock_start=$(date +%s)
    if [ $(logged_in_user) = $USER ]; then
      echo $(date) Locking screen
      $SAY Locking screen
      nohup /System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend >> /tmp/timer.out.$USER </dev/null 2>&1 &
    fi

    # give the screen 10 seconds to lock before killing processes
    while [ $(date +%s) -lt $((lock_start+10)) ]; do
      if [ $(logged_in_user) = root ]; then
        echo $(date) Screen locked. Timer exiting.
        exit
      fi
      sleep 0.1
    done

    echo $(date) Screen not locked. Killing programs running as $USER
    $SAY Killing programs owned by $(logged_in_user)
    kill -9 $(pgrep -u $(logged_in_user) | grep -vw $$)
  done
}


# make the screen lock if this timer program exits (prevents ^C, etc)
trap 'lockit' TERM QUIT EXIT

# From http://stackoverflow.com/questions/3173131/redirect-copy-of-stdout-to-log-file-from-within-bash-script-itself
# Redirect stdout ( > ) into a named pipe ( >() ) running "tee"
exec > >(tee $SESSION_DIR/log.txt)

# Without this, only stdout would be captured - i.e. your
# log file would not contain any error messages.
# SEE answer by Adam Spiers, which keeps STDERR a seperate stream -
# I did not want to steal from him by simply adding his answer to mine.
exec 2>&1


echo "$(date) Stopping in $TIME minutes"
echo "Saving info to $(basename $SESSION_DIR)"
$SAY ${GREETING}, it is time to $MESSAGE

START=$(date +%s)
LAST_UPDATE=0
END=$(( START + TIME*60))

NOW=$(date +%s)
while [ $NOW -lt $END ]; do
  # print an update every 5 minutes
  if [ $(( NOW - LAST_UPDATE )) -gt 300 ]; then
     LAST_UPDATE=$NOW
     echo "$(date) Still playing...."
  fi

  MINUTES_LEFT=$(( (END-NOW)/60 ))

  if [ $MINUTES_LEFT -lt 5 ]; then
    if [ $MINUTES_LEFT -eq 1 ]; then
       $SAY "1 minute left"
    else
       $SAY "$MINUTES_LEFT minutes left"
    fi
  fi

  sleep 60
  NOW=$(date +%s)
done

$SAY Sigh, it is time to stop
sleep $DELAY_AFTER_WARNING

lockit
